#!/usr/bin/env bash
#set -euo pipefail

# Main script execution
action=$1
shift  # Remove the first argument (action) from the list
action_values=("$@")  # Capture the remaining arguments (tool names)

# Print the action and arguments
echo -e "\n▶️ DOX CLI running... Action: $action; Arguments: ${action_values[@]}"


# Directory paths for DOX (combined in one line for better readability)
export DOX_CLI_VERSION="v0.1.0"

export DOX_DIR="${DOX_DIR:-$HOME/.dox}"
export DOX_CUSTOM_DIR="${DOX_CUSTOM_DIR:-$DOX_DIR/customize}"
export DOX_RESOURCES_DIR="${DOX_RESOURCES_DIR:-$HOME/dox_resources}"
export DOX_ENV="dox_env"

source ${DOX_DIR}/lib/shared/print.sh
source ${DOX_DIR}/lib/shared/env_handler.sh

# Function to validate arguments based on min and max
function validate_args() {
    local min=$1
    local max=$2
    local num_args=$3

    if [ "$num_args" -lt "$min" ]; then
        error "Error: Minimum $min argument(s) required."
        return 1
    elif [ "$max" != "-1" ] && [ "$num_args" -gt "$max" ]; then
        error "Error: Maximum $max argument(s) allowed."
        return 1
    fi
    return 0
}

# Function to check if required tools are installed
function check_tools() {
    local tools=("tar" "unzip" "curl" "yq")  # List of required tools

    for tool in "${tools[@]}"; do
        if ! command -v "$tool" &>/dev/null; then
            echo "$tool is not installed, which is required for DOX to run" >&2
            echo "Required tools: (${tools[*]})"
            exit 1
        fi
    done
}

# Check all tools
check_tools

on_before_execution #Handling env variables

# Handle actions based on user input
case "$action" in
  version | --version)
    echo "DOX CLI version: $DOX_CLI_VERSION"
    ;;

  configure)
    # For 'configure' action, at least 1 argument is required (min=1, max=unlimited) (Example dox configure helm)
    validate_args 1 -1 ${#action_values[@]} || exit 1
    ${DOX_DIR}/lib/configure.sh "${action_values[@]}"
    ;;
  
  *)
    # For any other action, call the action.sh script # For 'tool' action, at least 2 argument is required (Example: dox docker build push)
    validate_args 1 -1 ${#action_values[@]} || exit 1
    # Capture the environment before the action
    source ${DOX_DIR}/lib/action.sh "$action" "${action_values[@]}"
    ;;
esac

on_after_execution #Handling env variables
