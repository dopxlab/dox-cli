apiVersion: apps/v1
kind: Deployment
metadata:
{{- if .Values.service.name }}
  name: {{ .Values.service.name }}
{{- else }}
  name: {{ include "helm-chart.fullname" . }}
{{- end }}
  labels:
    {{- include "helm-chart.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "helm-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "helm-chart.selectorLabels" . | nindent 8 }}
    spec:    
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
         {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "helm-chart.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Values.service.name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: IMAGE_VERSION
            value: "{{ .Values.image.tag }}"
          {{- if or .Values.app.configmap .Values.app.secret }}
          envFrom:
            {{- if .Values.app.configmap }}
            - configMapRef:
                name: {{ .Values.app.configmap }}
            {{- end }}
            {{- if .Values.app.secret }}
            - secretRef:
                name: {{ .Values.app.secret }}
            {{- end }}
          {{- end }}
          ports:
            - name: defaulthttp
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: {{ .Values.healthCheck.liveness.delay }}
            failureThreshold: 5
            periodSeconds: 8
            successThreshold: 1
            timeoutSeconds: 2
            httpGet:
              path: {{ .Values.healthCheck.liveness.path }}
              port: {{ .Values.healthCheck.port }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.healthCheck.readiness.delay }}
            failureThreshold: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            httpGet:
              path: {{ .Values.healthCheck.readiness.path }}
              port: {{ .Values.healthCheck.port }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.app.pvc }}
          volumeMounts:
            - name: existing-pv
              mountPath: /data
          {{- end }}
      volumes:
        {{- if .Values.app.pvc }}
        - name: existing-pv
          persistentVolumeClaim:
            claimName: {{ .Values.app.pvc }}
        {{- end }}        
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
