configure: |
  echo -e "\nüåü Configuration Summary üåü"
  printf "%-30s : %s\n" "PVC" "$APP_PVC"
  printf "%-30s : %s\n" "ConfigMap" "$APP_CONFIG_MAP"
  printf "%-30s : %s\n" "Secret" "$APP_SECRET"

  dox export APP_GITOPS_VARIABLES

actions:
  update-image-tag: |
    #------------------------ SETUP ------------------------#
    # Required environment variables
    : "${GITOPS_PAT:?‚ùå GITOPS_PAT is required}"
    : "${GITOPS_REPO:?‚ùå GITOPS_REPO is required}"
    : "${GIT_REPOSITORY_NAME:?‚ùå GIT_REPOSITORY_NAME is required}"
    : "${BUILD_VERSION:?‚ùå BUILD_VERSION is required}"

    echo -e "\nüåü Configuration Summary üåü"
    printf "%-30s : %s\n" "GITOPS_REPO" "$GITOPS_REPO"
    printf "%-30s : %s\n" "GIT_REPOSITORY_NAME" "$GIT_REPOSITORY_NAME"
    printf "%-30s : %s\n" "BUILD_VERSION" "$BUILD_VERSION"
    printf "%-30s : %s\n" "PVC" "$APP_PVC"
    printf "%-30s : %s\n" "ConfigMap" "$APP_CONFIG_MAP"
    printf "%-30s : %s\n" "Secret" "$APP_SECRET"

    # Config
    BRANCH="main"
    TMP_DIR=$(mktemp -d -t gitops-XXXXXXXXXX)
    VALUES_FILE="argo-apps/values.yaml"
    STAGE="${STAGE:-dev}"
    APP_NAME="$GIT_REPOSITORY_NAME"
    VERSION="$BUILD_VERSION"

    echo "üìÅ Created temp folder: $TMP_DIR"
    echo "üîÑ Cloning GitOps repo..."
    git clone --depth 1 --branch "$BRANCH" "https://${GITOPS_PAT}@${GITOPS_REPO}" "$TMP_DIR"

    cd "$TMP_DIR"

    #------------------------ PROCESSING ------------------------#
    echo "üìÑ Updating $VALUES_FILE for app=$APP_NAME, stage=$STAGE, version=$VERSION"

    APP_EXISTS=$(yq e ".applications[] | select(.name == \"$APP_NAME\") | .name" "$VALUES_FILE")

    if [[ "$APP_EXISTS" == "$APP_NAME" ]]; then
      echo "‚úÖ App '$APP_NAME' exists, updating stage '$STAGE' tag..."
      yq e ".applications[] |= (select(.name == \"$APP_NAME\") | .image.tag.$STAGE = \"$VERSION\")" -i "$VALUES_FILE"
    else
      echo "‚ûï App '$APP_NAME' not found. Creating entry and applying version '$VERSION' to all defined stages..."

      TMP_TAGS_FILE=$(mktemp)
      echo "tag:" > "$TMP_TAGS_FILE"
      for s in $(yq e '.stages[].name' "$VALUES_FILE"); do
        echo "  $s: \"$VERSION\"" >> "$TMP_TAGS_FILE"
      done

      TMP_APP_FILE=$(mktemp)
      {
        echo "- name: $APP_NAME"
        [[ -n "$APP_PVC" ]] && echo "  pvc: $APP_PVC"
        [[ -n "$APP_CONFIG_MAP" ]] && echo "  configmap: $APP_CONFIG_MAP"
        [[ -n "$APP_SECRET" ]] && echo "  secret: $APP_SECRET"
        echo "  image:"
        sed 's/^/    /' "$TMP_TAGS_FILE"
      } > "$TMP_APP_FILE"

      yq e ".applications += load(\"$TMP_APP_FILE\")" -i "$VALUES_FILE"

      rm -f "$TMP_TAGS_FILE" "$TMP_APP_FILE"
    fi


    #------------------------ GIT PUSH ------------------------#
    echo "üöÄ Committing and pushing changes..."
    git config user.name "GitOps Bot"
    git config user.email "bot@example.com"
    git add "$VALUES_FILE"

    if git diff --cached --quiet; then
      echo "‚ÑπÔ∏è No changes detected. Skipping commit."
    else
      git commit -m "üîÑ Update image tag for $APP_NAME: $VERSION ($STAGE)"
      git push origin "$BRANCH"
      echo "‚úÖ Changes pushed to branch '$BRANCH'"
    fi
