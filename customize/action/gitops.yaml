configure: |
  echo -e "\nüåü Configuration Summary üåü"
  printf "%-30s : %s\n" "PVC" "$APP_PVC"
  printf "%-30s : %s\n" "ConfigMap" "$APP_CONFIG_MAP"
  printf "%-30s : %s\n" "Secret" "$APP_SECRET"

  dox export APP_GITOPS_VARIABLES

actions:
  update-image-tag: |
    #!/bin/bash

    set -euo pipefail

    echo "______"
    echo "gitops-argocd-values.yaml"
    cat "${template_folder}/gitops-argocd-values.yaml"
    echo "______"

    CLEANED_FILE="${template_folder}/cleaned-gitops-argocd-values.yaml"

    # Clean null or empty values from the original values file
    yq e 'walk(if type == "object" then with_entries(select(.value != null and .value != "")) else . end)' \
      "${template_folder}/gitops-argocd-values.yaml" > "${CLEANED_FILE}"

    # Configuration
    BRANCH=$(git ls-remote --symref "https://${GITOPS_PAT}@${GITOPS_REPO}" HEAD | awk -F'/' '/^ref:/ {print $NF}')
    TMP_DIR=$(mktemp -d -t gitops-XXXXXXXXXX)
    VALUES_FILE="argo-apps/values.yaml"
    STAGE="${STAGE:-dev}"
    APP_NAME="$GIT_REPOSITORY_NAME"
    VERSION="$BUILD_VERSION"

    echo "üìÅ Created temp folder: $TMP_DIR"
    echo "üîÑ Cloning GitOps repo..."
    git clone --depth 1 --branch "$BRANCH" "https://${GITOPS_PAT}@${GITOPS_REPO}" "$TMP_DIR"

    cd "$TMP_DIR"

    #------------------------ PROCESSING ------------------------#

    # Extract the specific application block from cleaned file
    APPLICATION_DATA=$(yq e '.applications[] | select(.name == "'"$APPLICATION_NAME"'")' "$CLEANED_FILE")

    # Check if the application exists in the current values file
    EXISTING_APP=$(yq e '.applications[] | select(.name == "'"$APPLICATION_NAME"'")' "$VALUES_FILE")

    if [[ -n "$EXISTING_APP" ]]; then
      echo "üîÑ Application '$APPLICATION_NAME' found, updating it..."
      yq e "
        .applications |= (
          map(if .name == \"$APPLICATION_NAME\" then $APPLICATION_DATA else . end)
        )
      " -i "$VALUES_FILE"
    else
      echo "‚ûï Application '$APPLICATION_NAME' not found, adding it..."
      yq e ".applications += [$APPLICATION_DATA]" -i "$VALUES_FILE"
    fi

    echo "‚úÖ Application '$APPLICATION_NAME' has been updated or added in $VALUES_FILE."

    #------------------------ GIT PUSH ------------------------#
    echo "üöÄ Committing and pushing changes..."
    git config user.name "GitOps Bot"
    git config user.email "bot@example.com"
    git add "$VALUES_FILE"

    if git diff --cached --quiet; then
      echo "‚ÑπÔ∏è No changes detected. Skipping commit."
    else
      git commit -m "üîÑ Update image tag for $APP_NAME: $VERSION ($STAGE)"
      git push origin "$BRANCH"
      echo "‚úÖ Changes pushed to branch '$BRANCH'"
    fi
